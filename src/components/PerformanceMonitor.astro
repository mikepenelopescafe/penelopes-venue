---
// Performance Monitoring Component for Core Web Vitals tracking
---

<script>
  // Performance monitoring - simplified version without external dependencies
  // Track basic performance metrics

  function logPerformanceMetric(name, value) {
    console.log(`Performance ${name}:`, value);
  }

  // Track navigation timing
  if ('PerformanceObserver' in window) {
    // Track navigation timing
    const navObserver = new PerformanceObserver((list) => {
      for (const entry of list.getEntries()) {
        if (entry.entryType === 'navigation') {
          logPerformanceMetric('Navigation Timing', {
            domContentLoaded: entry.domContentLoadedEventEnd - entry.domContentLoadedEventStart,
            loadComplete: entry.loadEventEnd - entry.loadEventStart,
            totalTime: entry.loadEventEnd - entry.fetchStart
          });
        }
      }
    });
    navObserver.observe({ entryTypes: ['navigation'] });

    // Track resource loading
    const resourceObserver = new PerformanceObserver((list) => {
      for (const entry of list.getEntries()) {
        if (entry.duration > 1000) { // Log slow resources (>1s)
          logPerformanceMetric('Slow Resource', `${entry.name}: ${entry.duration}ms`);
        }
      }
    });
    resourceObserver.observe({ entryTypes: ['resource'] });
  }

  // Track Largest Contentful Paint (LCP)
  new PerformanceObserver((list) => {
    for (const entry of list.getEntries()) {
      logPerformanceMetric('LCP', `${entry.startTime}ms`);
    }
  }).observe({ entryTypes: ['largest-contentful-paint'] });

  // Track First Input Delay (FID)
  new PerformanceObserver((list) => {
    for (const entry of list.getEntries()) {
      logPerformanceMetric('FID', `${entry.processingStart - entry.startTime}ms`);
    }
  }).observe({ entryTypes: ['first-input'] });

  // Track Cumulative Layout Shift (CLS)
  let clsValue = 0;
  new PerformanceObserver((list) => {
    for (const entry of list.getEntries()) {
      if (!entry.hadRecentInput) {
        clsValue += entry.value;
        logPerformanceMetric('CLS', clsValue);
      }
    }
  }).observe({ entryTypes: ['layout-shift'] });
</script>

<script>
  // View transition performance monitoring
  document.addEventListener('astro:page-load', () => {
    console.log('Page loaded with view transitions');
  });

  document.addEventListener('astro:after-swap', () => {
    console.log('View transition completed');
  });
</script>

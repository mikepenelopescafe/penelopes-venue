---
import { Badge } from '@/components/ui/badge';
import { Picture } from 'astro:assets';

export interface GalleryImage {
  src: string;
  alt: string;
  category: string;
  title: string;
  description: string;
}

export interface Props {
  images: GalleryImage[];
}

const { images } = Astro.props;
---

<section class="py-20 px-6 bg-background">
  <div class="max-w-7xl mx-auto">
    <!-- Section Header -->
    <div class="text-center mb-16">
      <Badge className="mb-4 bg-primary/10 text-primary border-primary/20">Photo Gallery</Badge>
      <h2 class="text-4xl font-display text-foreground mb-4">
        Explore Our Beautiful Venue
      </h2>
      <p class="text-lg text-muted-foreground max-w-2xl mx-auto">
        From our charming Spanish-inspired exterior to our elegantly appointed reception spaces,
        discover what makes Penelope's Venue the perfect setting for your special celebration.
      </p>
    </div>

    <!-- Filter Buttons -->
    <div class="flex flex-wrap justify-center gap-4 mb-12" id="gallery-filters">
      <button
        class="filter-btn active btn-primary px-6 py-3 rounded-lg text-sm font-medium transition-all duration-300"
        data-filter="all"
      >
        All Photos
      </button>
      <button
        class="filter-btn btn-outline px-6 py-3 rounded-lg text-sm font-medium transition-all duration-300"
        data-filter="Exterior"
      >
        Exterior
      </button>
      <button
        class="filter-btn btn-outline px-6 py-3 rounded-lg text-sm font-medium transition-all duration-300"
        data-filter="Reception Area"
      >
        Reception Area
      </button>
    </div>

    <!-- Gallery Grid -->
    <div class="gallery-grid" id="gallery-grid">
      {images.map((image, index) => (
        <div
          class={`gallery-item group relative overflow-hidden rounded-xl bg-card hover-lift transition-all duration-500 cursor-pointer ${image.category === 'Exterior' ? 'exterior' : 'reception-area'}`}
          data-category={image.category}
          data-index={index}
        >
          <!-- Optimized Image with Astro -->
          <div class="aspect-[4/3] overflow-hidden">
            <img
              src={image.src}
              alt={image.alt}
              loading={index < 6 ? "eager" : "lazy"}
              class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
            />
          </div>

          <!-- Overlay -->
          <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500">
            <div class="absolute bottom-0 left-0 right-0 p-6 text-white">
              <div class="flex items-center justify-between mb-2">
                <h3 class="text-lg font-semibold">{image.title}</h3>
                <Badge className="bg-primary/20 text-primary border-primary/30 text-xs">
                  {image.category}
                </Badge>
              </div>
              <p class="text-sm text-white/90 leading-relaxed">
                {image.description}
              </p>
            </div>
          </div>

          <!-- Click Overlay -->
          <div class="absolute inset-0 bg-black/0 group-hover:bg-black/10 transition-colors duration-300"></div>
        </div>
      ))}
    </div>

    <!-- Call to Action -->
    <div class="text-center mt-16">
      <div class="bg-card/50 rounded-2xl p-8 border border-primary/10 max-w-2xl mx-auto">
        <h3 class="text-2xl font-display text-foreground mb-4">
          Ready to Create Your Perfect Event?
        </h3>
        <p class="text-muted-foreground mb-6">
          Experience the magic of Penelope's Venue firsthand. Contact us today to discuss your special occasion.
        </p>
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <a href="/contact" class="btn-primary">
            Plan Your Event
          </a>
          <a href="/services" class="btn-outline">
            View Services
          </a>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Lightbox Modal -->
<div id="lightbox-modal" class="fixed inset-0 z-50 hidden bg-black/95 backdrop-blur-sm">
  <div class="relative w-full h-full flex items-center justify-center p-4">
    <!-- Close Button -->
    <button
      id="lightbox-close"
      class="absolute top-6 right-6 z-10 bg-white/10 hover:bg-white/20 text-white rounded-full p-3 transition-all duration-300 hover:scale-110"
      aria-label="Close gallery"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>

    <!-- Navigation Buttons -->
    <button
      id="lightbox-prev"
      class="absolute left-6 top-1/2 -translate-y-1/2 z-10 bg-white/10 hover:bg-white/20 text-white rounded-full p-3 transition-all duration-300 hover:scale-110"
      aria-label="Previous image"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
      </svg>
    </button>

    <button
      id="lightbox-next"
      class="absolute right-6 top-1/2 -translate-y-1/2 z-10 bg-white/10 hover:bg-white/20 text-white rounded-full p-3 transition-all duration-300 hover:scale-110"
      aria-label="Next image"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
      </svg>
    </button>

    <!-- Main Image Container -->
    <div class="relative max-w-5xl max-h-full">
      <img id="lightbox-image" src="" alt="" class="max-w-full max-h-full object-contain rounded-lg shadow-2xl" />

      <!-- Image Info -->
      <div id="lightbox-info" class="absolute bottom-0 left-0 right-0 bg-black/70 backdrop-blur-sm rounded-b-lg p-6 text-white">
        <div class="flex items-center justify-between mb-2">
          <h3 id="lightbox-title" class="text-xl font-semibold"></h3>
          <Badge id="lightbox-category" className="bg-primary/20 text-primary border-primary/30">
          </Badge>
        </div>
        <p id="lightbox-description" class="text-white/90"></p>
      </div>
    </div>
  </div>
</div>

<style>
  /* Masonry Grid Layout */
  .gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  /* Filter Animations */
  .filter-btn {
    position: relative;
    overflow: hidden;
  }

  .filter-btn::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .filter-btn:hover::before {
    width: 300px;
    height: 300px;
  }

  /* Gallery Item Animations */
  .gallery-item {
    transform: translateY(0);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .gallery-item:hover {
    transform: translateY(-8px);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .gallery-grid {
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 1rem;
    }
  }

  @media (max-width: 480px) {
    .gallery-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  // Gallery functionality
  class GalleryManager {
    images: HTMLElement[];
    currentIndex: number;
    filteredImages: HTMLElement[];

    constructor() {
      this.images = [];
      this.currentIndex = 0;
      this.filteredImages = [];
      this.init();
    }

    init() {
      this.images = Array.from(document.querySelectorAll('.gallery-item')) as HTMLElement[];
      this.filteredImages = [...this.images];
      this.setupFilters();
      this.setupLightbox();
      this.setupKeyboardNavigation();
    }

    setupFilters() {
      const filterButtons = document.querySelectorAll('.filter-btn');

      filterButtons.forEach((button: Element) => {
        button.addEventListener('click', () => {
          const filter = (button as HTMLElement).dataset.filter;

          // Update active button
          filterButtons.forEach((btn: Element) => {
            btn.classList.remove('active', 'btn-primary');
            btn.classList.add('btn-outline');
          });
          button.classList.add('active', 'btn-primary');
          button.classList.remove('btn-outline');

          // Filter images
          this.filterImages(filter);
        });
      });
    }

    filterImages(filter: string | undefined) {
      const galleryGrid = document.getElementById('gallery-grid');

      if (filter === 'all' || !filter) {
        this.filteredImages = [...this.images];
        this.images.forEach((img: HTMLElement) => img.style.display = 'block');
      } else {
        this.filteredImages = this.images.filter((img: HTMLElement) => img.dataset.category === filter);
        this.images.forEach((img: HTMLElement) => {
          img.style.display = img.dataset.category === filter ? 'block' : 'none';
        });
      }

      // Re-layout grid with animation
      this.animateGrid();
    }

    animateGrid() {
      const items = document.querySelectorAll('.gallery-item[style*="display: block"]');
      items.forEach((item: Element, index: number) => {
        (item as HTMLElement).style.animationDelay = `${index * 0.1}s`;
        item.classList.add('animate-in');
      });
    }

    setupLightbox() {
      const modal = document.getElementById('lightbox-modal');
      const closeBtn = document.getElementById('lightbox-close');
      const prevBtn = document.getElementById('lightbox-prev');
      const nextBtn = document.getElementById('lightbox-next');

      // Open lightbox on image click
      this.images.forEach((item: HTMLElement, index: number) => {
        item.addEventListener('click', () => {
          this.currentIndex = index;
          this.openLightbox();
        });
      });

      // Close lightbox
      if (closeBtn) {
        closeBtn.addEventListener('click', () => {
          this.closeLightbox();
        });
      }

      // Navigation
      if (prevBtn) {
        prevBtn.addEventListener('click', () => {
          this.navigateLightbox(-1);
        });
      }

      if (nextBtn) {
        nextBtn.addEventListener('click', () => {
          this.navigateLightbox(1);
        });
      }

      // Click outside to close
      if (modal) {
        modal.addEventListener('click', (e: Event) => {
          if (e.target === modal) {
            this.closeLightbox();
          }
        });
      }
    }

    openLightbox() {
      const modal = document.getElementById('lightbox-modal');
      const currentItem = this.filteredImages[this.currentIndex];

      if (!currentItem || !modal) return;

      const img = currentItem.querySelector('img') as HTMLImageElement;
      const modalImage = document.getElementById('lightbox-image') as HTMLImageElement;
      const modalTitle = document.getElementById('lightbox-title') as HTMLElement;
      const modalCategory = document.getElementById('lightbox-category') as HTMLElement;
      const modalDescription = document.getElementById('lightbox-description') as HTMLElement;

      if (!img || !modalImage || !modalTitle || !modalCategory || !modalDescription) return;

      // Update modal content
      modalImage.src = img.src;
      modalImage.alt = img.alt;

      // Get image data from data attributes or parent element
      const category = currentItem.dataset.category;
      const title = currentItem.querySelector('h3')?.textContent || 'Gallery Image';
      const description = currentItem.querySelector('p')?.textContent || '';

      modalTitle.textContent = title;
      modalCategory.textContent = category || '';
      modalDescription.textContent = description;

      // Show modal with animation
      modal.classList.remove('hidden');
      modal.classList.add('animate-in');
      document.body.style.overflow = 'hidden';
    }

    closeLightbox() {
      const modal = document.getElementById('lightbox-modal');
      if (modal) {
        modal.classList.add('hidden');
        document.body.style.overflow = '';
      }
    }

    navigateLightbox(direction: number) {
      this.currentIndex = (this.currentIndex + direction + this.filteredImages.length) % this.filteredImages.length;
      this.openLightbox();
    }

    setupKeyboardNavigation() {
      document.addEventListener('keydown', (e: KeyboardEvent) => {
        const modal = document.getElementById('lightbox-modal');

        if (!modal || modal.classList.contains('hidden')) return;

        switch (e.key) {
          case 'Escape':
            this.closeLightbox();
            break;
          case 'ArrowLeft':
            this.navigateLightbox(-1);
            break;
          case 'ArrowRight':
            this.navigateLightbox(1);
            break;
        }
      });
    }
  }

  // Initialize gallery when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new GalleryManager();
  });

  // Add CSS animations
  const style = document.createElement('style');
  style.textContent = `
    .animate-in {
      animation: fadeInUp 0.6s ease-out forwards;
    }

    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(30px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
  `;
  document.head.appendChild(style);
</script>

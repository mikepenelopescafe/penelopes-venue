---
import { Image } from 'astro:assets';
import ThemeToggle from './ThemeToggle.astro';

const navItems = [
  { label: 'Home', href: '/' },
  { label: 'Venue', href: '/venue' },
  { label: 'Catering', href: '/catering' },
  { label: 'Gallery', href: '/gallery' },
  { label: 'Contact', href: '/contact#general' },
];

const currentPath = Astro.url.pathname;
---

<header class="sticky top-0 z-50 glass border-b border-primary/20 transition-all duration-300">
  <nav class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex items-center justify-between h-20">
      <!-- Logo -->
      <a href="/" class="flex items-center space-x-3 group">
        <!-- Logo for dark theme (logo.svg) -->
        <Image
          id="logo-dark"
          src="/logo.svg"
          alt="Penelope's Venue"
          width={192}
          height={48}
          class="h-12 w-auto transition-transform duration-300 group-hover:scale-105"
        />
        <!-- Logo for light theme (logo-lite.svg) -->
        <Image
          id="logo-light"
          src="/logo-lite.svg"
          alt="Penelope's Venue"
          width={192}
          height={48}
          class="h-12 w-auto transition-transform duration-300 group-hover:scale-105 hidden"
        />
      </a>
      
      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-8" data-ga-section="Top Nav">
        {navItems.map(item => (
          <a 
            href={item.href}
            data-ga-cta={`nav-${item.label.toLowerCase()}`}
            class={`text-sm font-medium font-display transition-all duration-300 relative ${
              currentPath === item.href
                ? 'text-primary'
                : 'text-foreground/90 hover:text-primary'
            }`}
          >
            {item.label}
            {currentPath === item.href && (
              <span class="absolute -bottom-1 left-0 w-full h-0.5 bg-primary rounded-full"></span>
            )}
          </a>
        ))}
        <ThemeToggle />
        <a
          href="/contact#book"
          data-ga-cta="nav-book-now"
          class="bg-primary hover:bg-primary/90 text-primary-foreground px-6 py-2.5 rounded-md text-sm font-medium font-display transition-all duration-300 hover-scale"
        >
          Book Now
        </a>
      </div>
      
      <!-- Mobile controls -->
      <div class="md:hidden flex items-center space-x-2">
        <ThemeToggle />
        <button 
          id="mobile-menu-button"
          class="inline-flex items-center justify-center p-2 rounded-md text-foreground hover:text-primary hover:bg-primary/10 transition-all duration-300"
          aria-expanded="false"
        >
          <span class="sr-only">Open main menu</span>
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
    </div>
    
    <!-- Mobile Navigation Panel -->
    <div id="mobile-menu" class="md:hidden hidden fixed inset-x-0 top-20 glass-mobile" data-ga-section="Mobile Nav">
      <div class="px-4 pt-4 pb-6 space-y-2 max-h-[calc(100vh-5rem)] overflow-y-auto">
        {navItems.map(item => (
          <a 
            href={item.href}
            data-ga-cta={`mobile-nav-${item.label.toLowerCase()}`}
            class={`block px-4 py-3 rounded-md text-base font-medium font-display transition-all duration-300 ${
              currentPath === item.href
                ? 'bg-primary/20 text-primary'
                : 'text-foreground hover:bg-primary/10 hover:text-primary'
            }`}
          >
            {item.label}
          </a>
        ))}
        <a
          href="/contact#book"
          data-ga-cta="mobile-nav-book-now"
          class="block w-full text-center bg-primary hover:bg-primary/90 text-primary-foreground px-4 py-3 rounded-md text-base font-medium font-display transition-all duration-300 mt-4"
        >
          Book Now
        </a>
      </div>
    </div>
  </nav>
</header>

<script>
  // Mobile menu functionality only (theme/logo handled centrally in Layout)
  function initMobileMenu() {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');

    if (!mobileMenuButton || !mobileMenu) return;
    
    let isMenuOpen = false;

    // Toggle menu function
    const toggleMenu = () => {
      isMenuOpen = !isMenuOpen;

      if (isMenuOpen) {
        mobileMenuButton.setAttribute('aria-expanded', 'true');
        mobileMenu.classList.remove('hidden');
      } else {
        mobileMenuButton.setAttribute('aria-expanded', 'false');
        mobileMenu.classList.add('hidden');
      }
    };

    // Close menu function
    const closeMenu = () => {
      if (isMenuOpen) {
        isMenuOpen = false;
        mobileMenuButton.setAttribute('aria-expanded', 'false');
        mobileMenu.classList.add('hidden');
      }
    };

    // Hamburger button click handler
    mobileMenuButton.addEventListener('click', (e) => {
      e.stopPropagation();
      toggleMenu();
    });

    // Close menu when clicking a navigation link
    const mobileLinks = mobileMenu.querySelectorAll('a');
    mobileLinks.forEach(link => {
      link.addEventListener('click', () => {
        closeMenu();
      });
    });

    // Close menu when clicking outside
    document.addEventListener('click', (e) => {
      const target = e.target as Node | null;
      // Check if click is outside menu and button
      if (!mobileMenu.contains(target) && !mobileMenuButton.contains(target)) {
        closeMenu();
      }
    });

    // Prevent menu clicks from bubbling to document
    mobileMenu.addEventListener('click', (e) => {
      e.stopPropagation();
    });
  }
  
  // Initialize mobile menu
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initMobileMenu);
  } else {
    initMobileMenu();
  }
</script>
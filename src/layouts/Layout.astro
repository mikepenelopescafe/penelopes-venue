---
import '@/styles/global.css';
import { getCollection } from 'astro:content';
import Navigation from '@/components/Navigation.astro';
import PromoBanner from '@/components/PromoBanner.astro';
import Footer from '@/components/Footer.astro';
import { ClientRouter } from 'astro:transitions';

export interface Props {
  title: string;
  description?: string;
  keywords?: string;
  canonical?: string;
  ogImage?: string;
  noIndex?: boolean;
  article?: {
    publishedTime?: Date;
    modifiedTime?: Date;
    author?: string;
    tags?: string[];
  };
}

const { 
  title, 
  description = "Boutique wedding & event venue in Westminster, CO. 50–100 guests, in‑house catering & full bar.",
  keywords = "wedding venue Westminster, event venue Westminster CO, Denver metro venue, small wedding venue, private event space",
  canonical,
  ogImage = '/logo.svg',
  noIndex = false,
  article,
} = Astro.props;

const siteUrl = Astro.site || 'https://penelopesboutiquevenue.com';
const canonicalUrl = canonical || new URL(Astro.url.pathname, siteUrl).href;

// Check if we're in production build mode (but actual domain check happens client-side)
const isProduction = import.meta.env.PROD || import.meta.env.VERCEL_ENV === 'production';
const googleAnalyticsId = import.meta.env.PUBLIC_GA_MEASUREMENT_ID || 'G-FJ5ECQE84Q';

// Build breadcrumb items from path; include Home as the first item
const pathSegments = Astro.url.pathname.split('/').filter(Boolean);
const breadcrumbItems = pathSegments.length > 0
  ? [
      { '@type': 'ListItem', position: 1, name: 'Home', item: siteUrl },
      ...pathSegments.map((segment, index, parts) => {
        const name = segment
          .replace(/-/g, ' ')
          .replace(/\b\w/g, (c) => c.toUpperCase());
        const item = new URL('/' + parts.slice(0, index + 1).join('/') + '/', siteUrl).href;
        return { '@type': 'ListItem', position: index + 2, name, item };
      })
    ]
  : [];

// Compute AggregateRating and limited Review items from testimonials
let testimonialsMarkdown = [] as Array<{ author: string; body?: string; rating: number }>;
let testimonialsJson = [] as Array<{ author: string; body?: string; rating: number }>;

try {
  const mdEntries = await getCollection('testimonials');
  testimonialsMarkdown = mdEntries.map((t) => ({
    author: t.data.clientName,
    body: t.data.highlight,
    rating: t.data.rating,
  }));
} catch (_) {}

try {
  const jsonEntries = await getCollection('testimonialsFile');
  testimonialsJson = jsonEntries.map((t) => ({
    author: t.data.author,
    body: t.data.quote,
    rating: t.data.rating,
  }));
} catch (_) {}

const allReviews = [...testimonialsMarkdown, ...testimonialsJson].filter((r) => typeof r.rating === 'number');
const reviewCount = allReviews.length;
const ratingValue = reviewCount
  ? Number((allReviews.reduce((sum, r) => sum + (r.rating || 0), 0) / reviewCount).toFixed(1))
  : undefined;

const venueSchema: Record<string, unknown> = {
  '@context': 'https://schema.org',
  '@type': 'EventVenue',
  '@id': new URL('#venue', siteUrl).href,
  name: "Penelope's Boutique Venue",
  description,
  url: siteUrl,
  telephone: '+1-720-639-2406',
  address: {
    '@type': 'PostalAddress',
    streetAddress: '8050 Federal Blvd',
    addressLocality: 'Westminster',
    addressRegion: 'CO',
    postalCode: '80031',
    addressCountry: 'US',
  },
  image: new URL(ogImage, siteUrl).href,
  priceRange: '$$-$$$',
  amenityFeature: [
    { '@type': 'LocationFeatureSpecification', name: 'In-house Catering' },
    { '@type': 'LocationFeatureSpecification', name: 'Full Bar' },
    { '@type': 'LocationFeatureSpecification', name: 'Event Planning Services' },
    { '@type': 'LocationFeatureSpecification', name: 'Parking' },
  ],
  areaServed: ['Westminster', 'Denver Metro', 'Arvada', 'Thornton', 'Northglenn'],
};

if (ratingValue && reviewCount) {
  (venueSchema as any).aggregateRating = {
    '@type': 'AggregateRating',
    ratingValue,
    reviewCount,
  };
  // Include up to 3 recent-looking reviews for rich snippets without bloating
  (venueSchema as any).review = allReviews.slice(0, 3).map((r) => ({
    '@type': 'Review',
    author: { '@type': 'Person', name: r.author },
    reviewBody: r.body,
    reviewRating: { '@type': 'Rating', ratingValue: r.rating, bestRating: 5, worstRating: 1 },
  }));
}
---


<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="keywords" content={keywords} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    
    {noIndex && <meta name="robots" content="noindex, nofollow" />}
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalUrl} />
    
    <!-- Open Graph -->
    <meta property="og:type" content={article ? 'article' : 'website'} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalUrl} />
    <meta property="og:site_name" content="Penelope's Boutique Venue" />
    <meta property="og:image" content={new URL(ogImage, siteUrl).href} />
    <meta property="og:locale" content="en_US" />
    
    {article && (
      <>
        {article.publishedTime && (
          <meta property="article:published_time" content={article.publishedTime.toISOString()} />
        )}
        {article.modifiedTime && (
          <meta property="article:modified_time" content={article.modifiedTime.toISOString()} />
        )}
        {article.author && (
          <meta property="article:author" content={article.author} />
        )}
        {article.tags?.map(tag => (
          <meta property="article:tag" content={tag} />
        ))}
      </>
    )}
    
    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={new URL(ogImage, siteUrl).href} />
    
    <!-- Schema.org structured data -->
    <script type="application/ld+json" set:html={JSON.stringify({
        "@context": "https://schema.org",
        "@type": "EventVenue",
        "@id": new URL('#venue', siteUrl).href,
        "name": "Penelope's Boutique Venue",
        "description": description,
        "url": siteUrl,
        "telephone": "+1-720-639-2406",
        "address": {
          "@type": "PostalAddress",
          "streetAddress": "8050 Federal Blvd",
          "addressLocality": "Westminster",
          "addressRegion": "CO",
          "postalCode": "80031",
          "addressCountry": "US"
        },
        "image": new URL(ogImage, siteUrl).href,
        "priceRange": "$$-$$$",
        "amenityFeature": [
          {"@type": "LocationFeatureSpecification", "name": "In-house Catering"},
          {"@type": "LocationFeatureSpecification", "name": "Full Bar"},
          {"@type": "LocationFeatureSpecification", "name": "Event Planning Services"},
          {"@type": "LocationFeatureSpecification", "name": "Parking"}
        ],
        "areaServed": ["Westminster", "Denver Metro", "Arvada", "Thornton", "Northglenn"]
      })}></script>
    
    <!-- BreadcrumbList JSON-LD (global; path-based) -->
    {breadcrumbItems.length > 0 && (
      <script type="application/ld+json" set:html={JSON.stringify({
          "@context": "https://schema.org",
          "@type": "BreadcrumbList",
          "itemListElement": breadcrumbItems
        })}></script>
    )}
    
    <!-- Favicon -->
   
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    
    <!-- Preconnect to external domains -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="dns-prefetch" href="https://fonts.googleapis.com" />
    
    <!-- Immediate theme application to prevent FOUC -->
    <script is:inline>
      (function() {
        // Get saved theme or default to light mode
        const savedTheme = localStorage.getItem('theme');
        const initialTheme = savedTheme || 'light';
        
        // Apply theme immediately
        document.documentElement.setAttribute('data-theme', initialTheme);
        localStorage.setItem('theme', initialTheme);
        
        // Create global theme manager
        window.themeManager = {
          currentTheme: initialTheme,
          
          updateUI: function(theme) {
            // Update toggle button icons
            const toggleButtons = document.querySelectorAll('.theme-toggle-btn');
            toggleButtons.forEach(function(button) {
              const lightIconId = button.getAttribute('data-light-icon');
              const darkIconId = button.getAttribute('data-dark-icon');
              const lightIcon = document.getElementById(lightIconId);
              const darkIcon = document.getElementById(darkIconId);
              
              if (lightIcon && darkIcon) {
                if (theme === 'light') {
                  lightIcon.classList.add('hidden');
                  darkIcon.classList.remove('hidden');
                } else {
                  lightIcon.classList.remove('hidden');
                  darkIcon.classList.add('hidden');
                }
              }
            });
            
            // Update logos
            const logoDark = document.getElementById('logo-dark');
            const logoLight = document.getElementById('logo-light');
            const footerLogoDark = document.getElementById('footer-logo-dark');
            const footerLogoLight = document.getElementById('footer-logo-light');
            const heroLogoDark = document.getElementById('hero-logo-dark');
            const heroLogoLight = document.getElementById('hero-logo-light');
            
            if (logoDark && logoLight) {
              if (theme === 'light') {
                logoDark.classList.add('hidden');
                logoLight.classList.remove('hidden');
              } else {
                logoDark.classList.remove('hidden');
                logoLight.classList.add('hidden');
              }
            }
            
            if (footerLogoDark && footerLogoLight) {
              if (theme === 'light') {
                footerLogoDark.classList.add('hidden');
                footerLogoLight.classList.remove('hidden');
              } else {
                footerLogoDark.classList.remove('hidden');
                footerLogoLight.classList.add('hidden');
              }
            }
            
            if (heroLogoDark && heroLogoLight) {
              if (theme === 'light') {
                heroLogoDark.classList.add('hidden');
                heroLogoLight.classList.remove('hidden');
              } else {
                heroLogoDark.classList.remove('hidden');
                heroLogoLight.classList.add('hidden');
              }
            }
          },
          
          setTheme: function(theme) {
            this.currentTheme = theme;
            document.documentElement.setAttribute('data-theme', theme);
            localStorage.setItem('theme', theme);
            this.updateUI(theme);
            window.dispatchEvent(new CustomEvent('themeChanged', { detail: { theme: theme } }));
          },
          
          toggleTheme: function() {
            const newTheme = this.currentTheme === 'dark' ? 'light' : 'dark';
            this.setTheme(newTheme);
          },
          
          attachEventListeners: function() {
            // Find all theme toggle buttons and attach direct listeners
            const buttons = document.querySelectorAll('.theme-toggle-btn');
            buttons.forEach(function(button) {
              // Remove any existing listener first
              button.removeEventListener('click', window.themeManager.buttonClickHandler);
              
              // Add new listener
              button.addEventListener('click', window.themeManager.buttonClickHandler);
            });
          },
          
          buttonClickHandler: function(e) {
            e.preventDefault();
            window.themeManager.toggleTheme();
          },
          
          init: function() {
            // Update UI immediately on initialization
            this.updateUI(this.currentTheme);
            
            // Attach event listeners
            this.attachEventListeners();
          }
        };
        
        // Initialize only when DOM is ready to ensure elements are available
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', function() {
            window.themeManager.init();
          });
        } else {
          // DOM is already loaded
          window.themeManager.init();
        }
      })();
    </script>
    
    <title>{title}</title>

    <!-- Sitemap Link for Search Engines -->
    <link rel="sitemap" href="/sitemap-index.xml" />

    <!-- Google Analytics (Production Domain Only) -->
    {isProduction ? (
      <script define:vars={{ googleAnalyticsId }}>
        // Only load GA on the actual production domain
        (function() {
          const hostname = window.location.hostname;
          const isProductionDomain = hostname === 'penelopesboutiquevenue.com' || 
                                      hostname === 'www.penelopesboutiquevenue.com';
          const isLocalhost = hostname === 'localhost' || 
                             hostname === '127.0.0.1' || 
                             hostname.startsWith('192.168.') ||
                             hostname.startsWith('10.') ||
                             hostname.startsWith('172.') ||
                             hostname.includes('.local') ||
                             hostname.includes('.lan');
          
          // Only load GA on production domain, never on localhost
          if (isProductionDomain && !isLocalhost) {
            // Dynamically load GA script
            const script = document.createElement('script');
            script.async = true;
            script.src = `https://www.googletagmanager.com/gtag/js?id=${googleAnalyticsId}`;
            document.head.appendChild(script);
            
            // Initialize GA
            window.dataLayer = window.dataLayer || [];
            function gtag(){ window.dataLayer.push(arguments); }
            window.gtag = gtag;
            gtag('js', new Date());
            gtag('config', googleAnalyticsId, { send_page_view: false });
            
            console.log('📊 Google Analytics: ENABLED (Production Domain)', googleAnalyticsId);
          } else {
            console.log('🔍 Google Analytics: DISABLED', {
              hostname,
              isProductionDomain,
              isLocalhost,
              reason: isLocalhost ? 'Local Development' : 'Non-Production Domain'
            });
          }
        })();
      </script>
    ) : (
      <script>
        console.log('🔍 Google Analytics: DISABLED (Development Build)');
      </script>
    )}
  </head>
  <body class="min-h-screen bg-background text-foreground flex flex-col">
    <PromoBanner />
    <Navigation />
    <main class="flex-1">
      <slot />
    </main>
    <Footer />
    <ClientRouter />

    <!-- Theme persistence script that runs on every navigation -->
    <script>
      // @ts-ignore - themeManager is attached at runtime in the head script
      // Function to restore theme and re-attach event listeners
      function restoreTheme() {
        const savedTheme = localStorage.getItem('theme');
        const theme = savedTheme || 'light';
        
        document.documentElement.setAttribute('data-theme', theme);
        
        // Update theme manager and re-attach event listeners
        // @ts-ignore - runtime global
        if (window.themeManager) {
          // @ts-ignore
          window.themeManager.currentTheme = theme;
          // Small delay to ensure DOM is ready after navigation
          setTimeout(function() {
            // @ts-ignore
            window.themeManager.updateUI(theme);
            // @ts-ignore
            window.themeManager.attachEventListeners();
          }, 10);
        }
      }
      
      // Listen for Astro view transition events
      document.addEventListener('astro:after-swap', restoreTheme);
      document.addEventListener('astro:page-load', restoreTheme);
      
      // Also restore on regular navigation
      window.addEventListener('pageshow', restoreTheme);
      
      // Initial restoration
      restoreTheme();
    </script>

    <!-- Global analytics: manual page_view, scroll depth, section view, CTA clicks -->
    <script>
      (function() {
    
        /**
         * Forward any arguments to window.gtag if available
         * @param {...any} args
         */
        /** @param {...any} args */
        // @ts-ignore - inline script context, relax typing of rest param
        function safeGtag(...args) {
          try {
            // @ts-ignore
            if (typeof window !== 'undefined' && typeof (window as any).gtag === 'function') {
              // @ts-ignore
              (window as any).gtag.apply(null, args);
            }
          } catch (_) {}
        }

        function trackPageView() {
          try {
            const page_location = window.location.href;
            const page_title = document.title || '';
            const page_path = window.location.pathname + window.location.search;
            // Manual page_view to avoid double counting with SPA transitions
            safeGtag('event', 'page_view', { page_location, page_title, page_path });
          } catch (_) {}
        }

        function initScrollDepth() {
          try {
            // Per-page thresholds tracking
            // @ts-ignore
            window.__gaScrollDepth = window.__gaScrollDepth || {};
            const key = window.location.pathname + window.location.search;
            // @ts-ignore
            if (!window.__gaScrollDepth[key]) {
              // @ts-ignore
              window.__gaScrollDepth[key] = new Set();
            }
            const thresholds = [25, 50, 75, 100];
            let ticking = false;

            function onScroll() {
              if (ticking) return;
              ticking = true;
              requestAnimationFrame(function() {
                try {
                  const scrolled = window.scrollY + window.innerHeight;
                  const total = document.documentElement.scrollHeight;
                  if (!total) return;
                  const pct = Math.min(100, Math.round((scrolled / total) * 100));
                  thresholds.forEach(function(threshold) {
                    // @ts-ignore
                    if (pct >= threshold && !window.__gaScrollDepth[key].has(threshold)) {
                      // @ts-ignore
                      window.__gaScrollDepth[key].add(threshold);
                      safeGtag('event', 'scroll_depth', {
                        percent_scrolled: threshold,
                        page_path: window.location.pathname + window.location.search
                      });
                    }
                  });
                } catch (_) {}
                ticking = false;
              });
            }

            window.removeEventListener('scroll', onScroll);
            window.addEventListener('scroll', onScroll, { passive: true });
            onScroll();
          } catch (_) {}
        }

        function initSectionObserver() {
          try {
            // Disconnect previous observer on route change
            // @ts-ignore
            if (window.__gaSectionObserver) {
              // @ts-ignore
              window.__gaSectionObserver.disconnect();
            }
            const seen = new Set();
            const observer = new IntersectionObserver(function(entries) {
              entries.forEach(function(entry) {
                if (entry.isIntersecting) {
                  const el = entry.target;
                  const name = el && el.getAttribute ? el.getAttribute('data-ga-section') || 'Unknown Section' : 'Unknown Section';
                  if (!seen.has(name)) {
                    seen.add(name);
                    safeGtag('event', 'section_view', {
                      section_name: name,
                      page_path: window.location.pathname
                    });
                  }
                }
              });
            }, { threshold: 0.5 });

            document.querySelectorAll('[data-ga-section]').forEach(function(el) { observer.observe(el); });
            // @ts-ignore
            window.__gaSectionObserver = observer;
          } catch (_) {}
        }

        function initCtaClickTracking() {
          /**
           * @param {Event} e
           */
          // @ts-ignore - inline script context, relax event typing
          function handler(e) {
            // @ts-ignore
            var el = e && e.target ? e.target : null;
            // @ts-ignore - Traverse to an element that supports closest
            while (el && !el.closest) { el = el.parentElement; }
            // @ts-ignore - el may still be null
            var target = el ? el.closest('[data-ga-cta], a[data-ga-cta]') : null;
            if (!target) return;
            try {
              // @ts-ignore
              var sectionEl = target.closest('[data-ga-section]');
              // @ts-ignore
              var section = sectionEl ? sectionEl.getAttribute('data-ga-section') || undefined : undefined;
              // @ts-ignore
              var link_url = target.getAttribute('href') || target.getAttribute('data-href') || undefined;
              var link_text = (target.textContent || '').trim().slice(0, 100);
              // @ts-ignore
              var cta_id = target.getAttribute('data-ga-cta') || undefined;
              safeGtag('event', 'select_content', {
                content_type: 'cta',
                item_id: cta_id,
                link_url: link_url,
                link_text: link_text,
                section: section
              });
            } catch (_) {}
          }
          document.removeEventListener('click', handler, true);
          document.addEventListener('click', handler, true);
        }

        function initAll() {
          trackPageView();
          initScrollDepth();
          initSectionObserver();
          initCtaClickTracking();
        }

        document.addEventListener('astro:page-load', initAll);
        document.addEventListener('astro:after-swap', initAll);

        if (document.readyState === 'complete' || document.readyState === 'interactive') {
          initAll();
        } else {
          document.addEventListener('DOMContentLoaded', initAll);
        }
      })();
    </script>
  </body>
</html>
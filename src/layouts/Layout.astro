---
import '@/styles/global.css';
import Navigation from '@/components/Navigation.astro';
import PromoBanner from '@/components/PromoBanner.astro';
import Footer from '@/components/Footer.astro';
import PerformanceMonitor from '@/components/PerformanceMonitor.astro';
import { ClientRouter } from 'astro:transitions';

export interface Props {
  title: string;
  description?: string;
  keywords?: string;
  canonical?: string;
  ogImage?: string;
  noIndex?: boolean;
  article?: {
    publishedTime?: Date;
    modifiedTime?: Date;
    author?: string;
    tags?: string[];
  };
}

const { 
  title, 
  description = "Boutique wedding & event venue in Westminster, CO. 50–100 guests, in‑house catering & full bar.",
  keywords = "wedding venue Westminster, event venue Westminster CO, Denver metro venue, small wedding venue, private event space",
  canonical,
  ogImage = '/logo.svg',
  noIndex = false,
  article,
} = Astro.props;

const siteUrl = Astro.site || 'https://penelopesboutiquevenue.com';
const canonicalUrl = canonical || new URL(Astro.url.pathname, siteUrl).href;
---


<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="keywords" content={keywords} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    
    {noIndex && <meta name="robots" content="noindex, nofollow" />}
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalUrl} />
    
    <!-- Open Graph -->
    <meta property="og:type" content={article ? 'article' : 'website'} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalUrl} />
    <meta property="og:site_name" content="Penelope's Boutique Venue" />
    <meta property="og:image" content={new URL(ogImage, siteUrl).href} />
    <meta property="og:locale" content="en_US" />
    
    {article && (
      <>
        {article.publishedTime && (
          <meta property="article:published_time" content={article.publishedTime.toISOString()} />
        )}
        {article.modifiedTime && (
          <meta property="article:modified_time" content={article.modifiedTime.toISOString()} />
        )}
        {article.author && (
          <meta property="article:author" content={article.author} />
        )}
        {article.tags?.map(tag => (
          <meta property="article:tag" content={tag} />
        ))}
      </>
    )}
    
    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={new URL(ogImage, siteUrl).href} />
    
    <!-- Schema.org structured data -->
    <script type="application/ld+json">
      {JSON.stringify({
        "@context": "https://schema.org",
        "@type": "EventVenue",
        "@id": new URL('#venue', siteUrl).href,
        "name": "Penelope's Boutique Venue",
        "description": description,
        "url": siteUrl,
        "telephone": "+1-720-639-2406",
        "address": {
          "@type": "PostalAddress",
          "streetAddress": "8050 Federal Blvd",
          "addressLocality": "Westminster",
          "addressRegion": "CO",
          "postalCode": "80031",
          "addressCountry": "US"
        },
        "image": new URL(ogImage, siteUrl).href,
        "priceRange": "$$-$$$",
        "amenityFeature": [
          {"@type": "LocationFeatureSpecification", "name": "In-house Catering"},
          {"@type": "LocationFeatureSpecification", "name": "Full Bar"},
          {"@type": "LocationFeatureSpecification", "name": "Event Planning Services"},
          {"@type": "LocationFeatureSpecification", "name": "Parking"}
        ],
        "areaServed": ["Westminster", "Denver Metro", "Arvada", "Thornton", "Northglenn"]
      })}
    </script>
    
    <!-- Favicon -->
   
    <link rel="icon" type="image/png" href="/favicon.png" />
    
    <!-- Preconnect to external domains -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="dns-prefetch" href="https://fonts.googleapis.com" />
    
    <!-- Immediate theme application to prevent FOUC -->
    <script is:inline>
      (function() {
        // Get saved theme or default to light mode
        const savedTheme = localStorage.getItem('theme');
        const initialTheme = savedTheme || 'light';
        
        // Apply theme immediately
        document.documentElement.setAttribute('data-theme', initialTheme);
        localStorage.setItem('theme', initialTheme);
        
        // Create global theme manager
        window.themeManager = {
          currentTheme: initialTheme,
          
          updateUI: function(theme) {
            // Update toggle button icons
            const toggleButtons = document.querySelectorAll('.theme-toggle-btn');
            toggleButtons.forEach(function(button) {
              const lightIconId = button.getAttribute('data-light-icon');
              const darkIconId = button.getAttribute('data-dark-icon');
              const lightIcon = document.getElementById(lightIconId);
              const darkIcon = document.getElementById(darkIconId);
              
              if (lightIcon && darkIcon) {
                if (theme === 'light') {
                  lightIcon.classList.add('hidden');
                  darkIcon.classList.remove('hidden');
                } else {
                  lightIcon.classList.remove('hidden');
                  darkIcon.classList.add('hidden');
                }
              }
            });
            
            // Update logos
            const logoDark = document.getElementById('logo-dark');
            const logoLight = document.getElementById('logo-light');
            const footerLogoDark = document.getElementById('footer-logo-dark');
            const footerLogoLight = document.getElementById('footer-logo-light');
            const heroLogoDark = document.getElementById('hero-logo-dark');
            const heroLogoLight = document.getElementById('hero-logo-light');
            
            if (logoDark && logoLight) {
              if (theme === 'light') {
                logoDark.classList.add('hidden');
                logoLight.classList.remove('hidden');
              } else {
                logoDark.classList.remove('hidden');
                logoLight.classList.add('hidden');
              }
            }
            
            if (footerLogoDark && footerLogoLight) {
              if (theme === 'light') {
                footerLogoDark.classList.add('hidden');
                footerLogoLight.classList.remove('hidden');
              } else {
                footerLogoDark.classList.remove('hidden');
                footerLogoLight.classList.add('hidden');
              }
            }
            
            if (heroLogoDark && heroLogoLight) {
              if (theme === 'light') {
                heroLogoDark.classList.add('hidden');
                heroLogoLight.classList.remove('hidden');
              } else {
                heroLogoDark.classList.remove('hidden');
                heroLogoLight.classList.add('hidden');
              }
            }
          },
          
          setTheme: function(theme) {
            this.currentTheme = theme;
            document.documentElement.setAttribute('data-theme', theme);
            localStorage.setItem('theme', theme);
            this.updateUI(theme);
            window.dispatchEvent(new CustomEvent('themeChanged', { detail: { theme: theme } }));
          },
          
          toggleTheme: function() {
            const newTheme = this.currentTheme === 'dark' ? 'light' : 'dark';
            this.setTheme(newTheme);
          },
          
          attachEventListeners: function() {
            // Find all theme toggle buttons and attach direct listeners
            const buttons = document.querySelectorAll('.theme-toggle-btn');
            buttons.forEach(function(button) {
              // Remove any existing listener first
              button.removeEventListener('click', window.themeManager.buttonClickHandler);
              
              // Add new listener
              button.addEventListener('click', window.themeManager.buttonClickHandler);
            });
          },
          
          buttonClickHandler: function(e) {
            e.preventDefault();
            window.themeManager.toggleTheme();
          },
          
          init: function() {
            // Update UI immediately on initialization
            this.updateUI(this.currentTheme);
            
            // Attach event listeners
            this.attachEventListeners();
          }
        };
        
        // Initialize only when DOM is ready to ensure elements are available
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', function() {
            window.themeManager.init();
          });
        } else {
          // DOM is already loaded
          window.themeManager.init();
        }
      })();
    </script>
    
    <title>{title}</title>
  </head>
  <body class="min-h-screen bg-background text-foreground flex flex-col">
    <PromoBanner />
    <Navigation />
    <main class="flex-1">
      <slot />
    </main>
    <Footer />
    <ClientRouter />

    <!-- Performance monitoring for Core Web Vitals -->
    <PerformanceMonitor />
    
    <!-- Theme persistence script that runs on every navigation -->
    <script>
      // @ts-ignore - themeManager is attached at runtime in the head script
      // Function to restore theme and re-attach event listeners
      function restoreTheme() {
        const savedTheme = localStorage.getItem('theme');
        const theme = savedTheme || 'light';
        
        document.documentElement.setAttribute('data-theme', theme);
        
        // Update theme manager and re-attach event listeners
        // @ts-ignore - runtime global
        if (window.themeManager) {
          // @ts-ignore
          window.themeManager.currentTheme = theme;
          // Small delay to ensure DOM is ready after navigation
          setTimeout(function() {
            // @ts-ignore
            window.themeManager.updateUI(theme);
            // @ts-ignore
            window.themeManager.attachEventListeners();
          }, 10);
        }
      }
      
      // Listen for Astro view transition events
      document.addEventListener('astro:after-swap', restoreTheme);
      document.addEventListener('astro:page-load', restoreTheme);
      
      // Also restore on regular navigation
      window.addEventListener('pageshow', restoreTheme);
      
      // Initial restoration
      restoreTheme();
    </script>
  </body>
</html>